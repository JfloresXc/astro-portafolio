---
interface Props {
  text: string;
  optionSelectedOfHandle?: string;
}

const { text, optionSelectedOfHandle = "empty" } = Astro.props;
---

<button-container data-option={optionSelectedOfHandle}>
  <button
    class="button hero__button popup__button"
    id={`button-${optionSelectedOfHandle}`}
  >
    <span class="button-span">{text}</span>
  </button>
</button-container>

<script>
  class ButtonContainer extends HTMLElement {
    OPTIONS: any = {
      showModal: this.showModal,
      hideModal: this.hideModal,
    };

    constructor() {
      super();
      this.handleClick();
    }

    handleClick() {
      const option: any = this.dataset.option;

      if (option) {
        let idElement = `#button-${option}`;
        let button: any = this.querySelector(idElement);
        let handle: any = this.OPTIONS[option];

        button.addEventListener("click", () => {
          handle && handle();
        });
      }
    }

    showModal() {
      let modal: any = document.querySelector(".modal-container");
      modal.classList.add("show");
    }

    hideModal() {
      let modal: any = document.querySelector(".modal-container");
      modal.classList.remove("show");
    }
  }

  customElements.define("button-container", ButtonContainer);
</script>

<style>
  .button {
    --percent-moved-emoji: 200%;

    border: none;
    cursor: pointer;
    border-radius: 3px;

    font-family: "Space Grotesk", sans-serif;
    font-size: 1.2em;
    font-weight: 600;
    color: var(--colors-primary);
    padding: 1.4em 1em;
    width: 200px;
    position: relative;
    transition: 0.4s ease-in-out all;
    z-index: 0;
  }

  .button:hover {
    background: var(--colors-accent-1-accent);
  }

  .button-span {
    position: absolute;
    transform: translate(-50%, -50%);
    transition: 0.4s ease-in-out all;
  }

  .button:hover .button-span {
    transform: translate(-80px, -50%);
    color: var(--colors-light);
  }

  .button {
    margin-top: 2em;
    align-self: center;
  }

  .button::before {
    content: "ü§∑‚Äç‚ôÇÔ∏è";
    position: absolute;
    transform: translate(calc(var(--percent-moved-emoji) * -1), -50%);
    transition: 0.4s ease-in-out all;
    opacity: 0;
  }

  .button:hover::before {
    transform: translate(var(--percent-moved-emoji), -50%);
    opacity: 1;
  }
</style>
